import { Octokit } from '@octokit/rest';
import chalk from 'chalk';

export class GitHubClient {
  constructor() {
    this.octokit = new Octokit({ 
      auth: process.env.GITHUB_TOKEN,
      baseUrl: process.env.GITHUB_API_BASE_URL || 'https://api.github.com'
    });
    this.repo = {
      owner: process.env.GITHUB_OWNER,
      repo: process.env.GITHUB_REPO
    };
    this.dryRun = process.env.UA_DRY_RUN === 'true';
  }

  async createIssue(title, body, parentIssue = null) {
    try {
      if (this.dryRun) {
        console.log(chalk.gray(`  üìù [DRY-RUN] Would create issue: "${title}"`));
        return Math.floor(Math.random() * 1000) + 1; // Mock issue number
      }

      const issue = await this.octokit.issues.create({
        ...this.repo,
        title,
        body: `${body}\n\n---\n*Created by Problem Solving Automation*`
      });
      
      if (parentIssue) {
        await this.octokit.issues.createComment({
          ...this.repo,
          issue_number: parentIssue,
          body: `Subtask created: #${issue.data.number}`
        });
      }
      
      return issue.data.number;
    } catch (error) {
      console.error(chalk.red('  ‚ùå Error creating issue:'), error.message);
      throw error;
    }
  }

  async createPullRequest(title, branch, content, issueNumber) {
    try {
      if (this.dryRun) {
        console.log(chalk.gray(`  üìù [DRY-RUN] Would create PR: "${title}"`));
        return { 
          prNumber: Math.floor(Math.random() * 1000) + 1,
          url: `https://github.com/${this.repo.owner}/${this.repo.repo}/pull/123`
        };
      }

      // Create branch
      const baseBranch = await this.octokit.repos.getBranch({
        ...this.repo,
        branch: 'main'
      });

      await this.octokit.git.createRef({
        ...this.repo,
        ref: `refs/heads/${branch}`,
        sha: baseBranch.data.commit.sha
      });

      // Create file
      const fileName = this.getFileNameFromTitle(title);
      await this.octokit.repos.createOrUpdateFileContents({
        ...this.repo,
        path: fileName,
        message: title,
        content: Buffer.from(content).toString('base64'),
        branch: branch
      });

      // Create PR
      const pr = await this.octokit.pulls.create({
        ...this.repo,
        title: title,
        head: branch,
        base: 'main',
        body: `Closes #${issueNumber}\n\n---\n*Generated by Problem Solving Automation*`
      });

      return {
        prNumber: pr.data.number,
        url: pr.data.html_url
      };
    } catch (error) {
      console.error(chalk.red('  ‚ùå Error creating PR:'), error.message);
      throw error;
    }
  }

  async getApprovalStatus(prNumber) {
    try {
      if (this.dryRun) {
        console.log(chalk.gray(`  üìù [DRY-RUN] Would check approval status for PR #${prNumber}`));
        return true; // Mock approval
      }

      // In a real implementation, this would check for approvals
      // For now, we'll simulate approval after a delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      return true;
    } catch (error) {
      console.error(chalk.red('  ‚ùå Error checking approval status:'), error.message);
      return false;
    }
  }

  getFileNameFromTitle(title) {
    // Convert title to filename
    const sanitized = title
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
    
    return `src/${sanitized}.js`;
  }
} 